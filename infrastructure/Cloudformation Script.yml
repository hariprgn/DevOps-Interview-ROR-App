AWSTemplateFormatVersion: '2010-09-09'
Description: Mallow ECS Task

Parameters:
  RDSDBHost:
    Type: String
  RDSDBUsername:
    Type: String
  RDSDBPassword:
    Type: String
  RDSDBName:
    Type: String
  S3BucketName:
    Type: String
  S3BucketRegion:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/24'
      AvailabilityZone: 'us-east-1a'

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1b'

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ECSCluster:
    Type: AWS::ECS::Cluster

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-nginx-task
      RequiresCompatibilities:
        - EC2
      ContainerDefinitions:
        - Name: my-nginx-container
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mallow-ecr:nginx'
          PortMappings:
            - ContainerPort: 80
          Memory: 512
          LinuxParameters:
            Capabilities:
              Add:
                - SYS_PTRACE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: '/ecs/my-nginx-task'
              awslogs-region: 'us-east-1'
          Environment:
            - Name: DB_HOST
              Value: !Ref RDSDBHost
            - Name: DB_USER
              Value: !Ref RDSDBUsername
            - Name: DB_PASSWORD
              Value: !Ref RDSDBPassword
            - Name: DB_NAME
              Value: !Ref RDSDBName
            - Name: S3_BUCKET
              Value: !Ref S3BucketName
            - Name: AWS_REGION
              Value: !Ref S3BucketRegion
            - Name: RAILS_CONTAINER
              Value: 'rails_container'

        - Name: rails_container
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mallow-ecr:app'
          PortMappings:
            - ContainerPort: 3000
          Memory: 512

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LaunchType: EC2

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      Scheme: internet-facing

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  MyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: 'ami-0261755bbcb8c4a84'  # Ubuntu 20.04 LTS (replace with the actual Ubuntu 20.04 AMI ID)
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo 'ECS_CLUSTER=my-ecs-cluster' >> /etc/ecs/ecs.config
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack !Ref 'AWS::StackName' --resource MyAutoScalingGroup --region !Ref 'AWS::Region'

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyEC2Role

  MyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole

  S3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketAccessPolicy
      Roles:
        - !Ref MyEC2Role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketName}'
              - !Sub 'arn:aws:s3:::${S3BucketName}/*'

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
  ServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService
